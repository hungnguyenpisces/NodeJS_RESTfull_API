{
	"info": {
		"_postman_id": "975df218-782f-48dc-af32-bd07265fe145",
		"name": "Mock_project_team_1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Login success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code < 300) {\r",
											"  pm.collectionVariables.set('token', pm.response.json().data.accessToken)\r",
											"}\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'accessToken'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'accessToken': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 200 when login success', function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('\"token\" has been saved to collectionVariables', function () {\r",
											"  pm.expect(pm.response.json().data.accessToken).to.eql(pm.collectionVariables.get('token'));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dmurphy@classicmodelcars.com\",\r\n    \"password\": \"Abcd@1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login ERROR incorrect info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 401 when login error due incorrect info', function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dmurphy@classicmodelcars.com\",\r\n    \"password\": \"Abcd@12341\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login ERROR missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 when login error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dmurphy@classicmodelcars.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offices",
					"item": [
						{
							"name": "Get all Offices searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('officeCode', pm.response.json().total + 1)\r",
											"}\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'officeCode',\r",
											"        'city',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'state',\r",
											"        'country',\r",
											"        'postalCode',\r",
											"        'territory'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'state': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'territory': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									],
									"query": [
										{
											"key": "officeCode",
											"value": "5",
											"disabled": true
										},
										{
											"key": "city",
											"value": "NYC",
											"disabled": true
										},
										{
											"key": "addressLine1",
											"value": "25 Old Broad Street",
											"disabled": true
										},
										{
											"key": "addressLine2",
											"value": "apt. 5A",
											"disabled": true
										},
										{
											"key": "state",
											"value": "NY",
											"disabled": true
										},
										{
											"key": "country",
											"value": "USA",
											"disabled": true
										},
										{
											"key": "postalCode",
											"value": "10022",
											"disabled": true
										},
										{
											"key": "territory",
											"value": "NA",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Offices ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices?blabla=bloblo",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									],
									"query": [
										{
											"key": "blabla",
											"value": "bloblo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Offices ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices?officeCode=15&city=NY&phone=212",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									],
									"query": [
										{
											"key": "officeCode",
											"value": "15"
										},
										{
											"key": "city",
											"value": "NY"
										},
										{
											"key": "phone",
											"value": "212"
										},
										{
											"key": "addressLine1",
											"value": "",
											"disabled": true
										},
										{
											"key": "addressLine2",
											"value": "",
											"disabled": true
										},
										{
											"key": "state",
											"value": "",
											"disabled": true
										},
										{
											"key": "country",
											"value": "S",
											"disabled": true
										},
										{
											"key": "postalCode",
											"value": null,
											"disabled": true
										},
										{
											"key": "territory",
											"value": "meád",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Office with Employees",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'officeCode',\r",
											"        'city',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'state',\r",
											"        'country',\r",
											"        'postalCode',\r",
											"        'territory',\r",
											"        'employees'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'state': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'territory': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'employees': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'employeeNumber',\r",
											"            'lastName',\r",
											"            'firstName',\r",
											"            'extension',\r",
											"            'officeCode',\r",
											"            'reportsTo',\r",
											"            'jobTitle',\r",
											"            'userNumber',\r",
											"            'roleNumber',\r",
											"            'isActive'\r",
											"          ],\r",
											"          'properties': {\r",
											"            'employeeNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'lastName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'firstName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'extension': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'officeCode': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'reportsTo': {\r",
											"              'type': ['integer', 'null']\r",
											"            },\r",
											"            'jobTitle': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'userNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'roleNumber': {\r",
											"              'type': 'integer',\r",
											"              'enum': [1, 2, 3]\r",
											"            },\r",
											"            'isActive': {\r",
											"              'type': 'integer',\r",
											"              'enum': [0, 1]\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All Employees have same \"officeCode\"', function () {\r",
											"  let employeesArr = pm.response.json().data.employees;\r",
											"  let officeCode = pm.response.json().data.officeCode;\r",
											"  pm.expect(employeesArr[0].officeCode).to.equal(officeCode);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Office ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Office ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'params': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "090807060504030201"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offices success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set('officeCode', parseInt(pm.response.json().data.officeCode) + 1)\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'officeCode',\r",
											"        'city',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'country',\r",
											"        'postalCode',\r",
											"        'territory'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'territory': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"officeCode\": \"{{officeCode}}\",\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offices ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"officeCode\": \"1\",\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offices ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Offices success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set('officeCode', parseInt(pm.response.json().data.officeCode) + 1)\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'officeCode',\r",
											"        'city',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'country',\r",
											"        'postalCode',\r",
											"        'territory'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'territory': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"city\": \"London\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 7\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Offices ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Offices ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\",\r\n  \"blabla\": \"bloblo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Employees",
					"item": [
						{
							"name": "Get all Employees searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let datalength = pm.response.json().data.length\r",
											"let arrNum = [];\r",
											"if (pm.response.code < 400) {\r",
											"  for (let i = 0; i < datalength; i++) {\r",
											"    arrNum.push(pm.response.json().data[i].employeeNumber);\r",
											"  }\r",
											"  pm.collectionVariables.set('employeeNumber', Math.max(...arrNum) + 1)\r",
											"}\r",
											"\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'employeeNumber',\r",
											"        'lastName',\r",
											"        'firstName',\r",
											"        'extension',\r",
											"        'officeCode',\r",
											"        'reportsTo',\r",
											"        'jobTitle',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"        'email',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'employeeNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'lastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'firstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'extension': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'reportsTo': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'jobTitle': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [1, 2, 3]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        },\r",
											"        'email': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									],
									"query": [
										{
											"key": "employeeNumber",
											"value": "1088",
											"disabled": true
										},
										{
											"key": "lastName",
											"value": "Patterson",
											"disabled": true
										},
										{
											"key": "firstName",
											"value": "Gerard",
											"disabled": true
										},
										{
											"key": "extension",
											"value": "x102",
											"disabled": true
										},
										{
											"key": "officeCode",
											"value": "2",
											"disabled": true
										},
										{
											"key": "reportsTo",
											"value": "1002",
											"disabled": true
										},
										{
											"key": "jobTitle",
											"value": "VP Sales",
											"disabled": true
										},
										{
											"key": "roleNumber",
											"value": "2",
											"disabled": true
										},
										{
											"key": "isActive",
											"value": "0",
											"disabled": true
										},
										{
											"key": "email",
											"value": "gbondur@classicmodelcars.com",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Employees ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees?employeeNumber=101010&lastName=son&firstName=li",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									],
									"query": [
										{
											"key": "employeeNumber",
											"value": "101010"
										},
										{
											"key": "lastName",
											"value": "son"
										},
										{
											"key": "firstName",
											"value": "li"
										},
										{
											"key": "extension",
											"value": "x5",
											"disabled": true
										},
										{
											"key": "officeCode",
											"value": "2",
											"disabled": true
										},
										{
											"key": "reportsTo",
											"value": "1002",
											"disabled": true
										},
										{
											"key": "jobTitle",
											"value": "ger",
											"disabled": true
										},
										{
											"key": "userNumber",
											"value": "1",
											"disabled": true
										},
										{
											"key": "roleNumber",
											"value": "2",
											"disabled": true
										},
										{
											"key": "isActive",
											"value": "0",
											"disabled": true
										},
										{
											"key": "email",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Employees ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees?employeeNum=101010",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									],
									"query": [
										{
											"key": "employeeNum",
											"value": "101010"
										},
										{
											"key": "lastName",
											"value": "son",
											"disabled": true
										},
										{
											"key": "firstName",
											"value": "li",
											"disabled": true
										},
										{
											"key": "extension",
											"value": "x5",
											"disabled": true
										},
										{
											"key": "officeCode",
											"value": "2",
											"disabled": true
										},
										{
											"key": "reportsTo",
											"value": "1002",
											"disabled": true
										},
										{
											"key": "jobTitle",
											"value": "ger",
											"disabled": true
										},
										{
											"key": "userNumber",
											"value": "1",
											"disabled": true
										},
										{
											"key": "roleNumber",
											"value": "2",
											"disabled": true
										},
										{
											"key": "isActive",
											"value": "0",
											"disabled": true
										},
										{
											"key": "email",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Employees with Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'employeeNumber',\r",
											"        'lastName',\r",
											"        'firstName',\r",
											"        'extension',\r",
											"        'officeCode',\r",
											"        'reportsTo',\r",
											"        'jobTitle',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"        'email',\r",
											"        'customers'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'employeeNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'lastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'firstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'extension': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'reportsTo': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'jobTitle': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [1, 2, 3]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        },\r",
											"        'email': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'customers': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'customerNumber',\r",
											"            'customerName',\r",
											"            'contactLastName',\r",
											"            'contactFirstName',\r",
											"            'phone',\r",
											"            'addressLine1',\r",
											"            'addressLine2',\r",
											"            'city',\r",
											"            'state',\r",
											"            'postalCode',\r",
											"            'country',\r",
											"            'salesRepEmployeeNumber',\r",
											"            'creditLimit',\r",
											"            'userNumber',\r",
											"            'roleNumber',\r",
											"            'isActive',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'customerNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'customerName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'contactLastName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'contactFirstName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'phone': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'addressLine1': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'addressLine2': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'city': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'state': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'postalCode': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'country': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'salesRepEmployeeNumber': {\r",
											"              'type': ['integer', 'null']\r",
											"            },\r",
											"            'creditLimit': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'userNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'roleNumber': {\r",
											"              'type': 'integer',\r",
											"              'enum': [4]\r",
											"            },\r",
											"            'isActive': {\r",
											"              'type': 'integer',\r",
											"              'enum': [0, 1]\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All customers have same \"salesRepEmployeeNumber\"', function () {\r",
											"  let employeeNumber = pm.response.json().data.employeeNumber;\r",
											"  let customers = pm.response.json().data.customers;\r",
											"  pm.expect(customers[0].salesRepEmployeeNumber).to.equal(employeeNumber);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Employees ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "161161"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Employees ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Employees success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('employeeNumber', pm.response.json().data.employee.employeeNumber + 1)\r",
											"}\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'user',\r",
											"        'employee'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'user': {\r",
											"          'type': 'object',\r",
											"          'required': ['email', 'userNumber'],\r",
											"          'properties': {\r",
											"            'email': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'userNumber': {\r",
											"              'type': 'integer'\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        'employee': {\r",
											"          'type': 'object',\r",
											"          'required': [\r",
											"            'employeeNumber',\r",
											"            'lastName',\r",
											"            'firstName',\r",
											"            'extension',\r",
											"            'officeCode',\r",
											"            'jobTitle',\r",
											"            'userNumber',\r",
											"            'isActive',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'employeeNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'lastName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'firstName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'extension': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'officeCode': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'jobTitle': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'userNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'isActive': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('Both Employee & User has been created with same userNumber', function () {\r",
											"  pm.expect(pm.response.json().data.user.userNumber).to.eql(pm.response.json().data.employee.userNumber)\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Murphy\",\r\n  \"firstName\": \"Diane\",\r\n  \"extension\": \"x5800\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": null,\r\n  \"jobTitle\": \"Staff\",\r\n  \"email\": \"employee{{employeeNumber}}@email.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Employees ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Murphy\",\r\n  \"firstName\": \"Diane\",\r\n  \"extension\": \"x5800\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": null,\r\n  \"jobTitle\": \"Staff\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Employees ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Murphy\",\r\n  \"firstName\": \"Diane\",\r\n  \"extension\": \"x5800\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": null,\r\n  \"jobTitle\": \"Staff\",\r\n  \"email\": \"dmurphy@classicmodelcars.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employees success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'employeeNumber',\r",
											"        'lastName',\r",
											"        'firstName',\r",
											"        'extension',\r",
											"        'officeCode',\r",
											"        'jobTitle',\r",
											"        'userNumber',\r",
											"        'isActive',\r",
											"        'roleNumber'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'employeeNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'lastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'firstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'extension': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'jobTitle': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": 1,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employees ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"employeeNumber\": 1188,\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "1188"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employees ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Employees success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'employeeNumber',\r",
											"        'lastName',\r",
											"        'firstName',\r",
											"        'extension',\r",
											"        'officeCode',\r",
											"        'jobTitle',\r",
											"        'userNumber',\r",
											"        'isActive',\r",
											"        'roleNumber'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'employeeNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'lastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'firstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'extension': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'jobTitle': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "22"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Employees ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Employees ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'params': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customers",
					"item": [
						{
							"name": "Get all Customers searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let datalength = pm.response.json().data.length\r",
											"let arrNum = [];\r",
											"if (pm.response.code < 400) {\r",
											"  for (let i = 0; i < datalength; i++) {\r",
											"    arrNum.push(pm.response.json().data[i].customerNumber);\r",
											"  }\r",
											"  pm.collectionVariables.set('customerNumber', Math.max(...arrNum) + 1)\r",
											"}\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'customerNumber',\r",
											"        'customerName',\r",
											"        'contactLastName',\r",
											"        'contactFirstName',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'city',\r",
											"        'state',\r",
											"        'postalCode',\r",
											"        'country',\r",
											"        'salesRepEmployeeNumber',\r",
											"        'creditLimit',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'customerName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactLastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactFirstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'state': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'salesRepEmployeeNumber': {\r",
											"          'type': ['integer', 'null']\r",
											"        },\r",
											"        'creditLimit': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [4]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									],
									"query": [
										{
											"key": "customerName",
											"value": "Australian Collectors, Co.",
											"disabled": true
										},
										{
											"key": "contactFirstName",
											"value": "Jean",
											"disabled": true
										},
										{
											"key": "phone",
											"value": "40.32.2555",
											"disabled": true
										},
										{
											"key": "addressLine1",
											"value": "8489 Strong St.",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Nantes",
											"disabled": true
										},
										{
											"key": "state",
											"value": "NY",
											"disabled": true
										},
										{
											"key": "postalCode",
											"value": "44000",
											"disabled": true
										},
										{
											"key": "country",
											"value": "France",
											"disabled": true
										},
										{
											"key": "salesRepEmployeeNumber",
											"value": "1370",
											"disabled": true
										},
										{
											"key": "creditLimit",
											"value": "21000",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers?phone=9999999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									],
									"query": [
										{
											"key": "phone",
											"value": "9999999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers?customerNumber=123",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									],
									"query": [
										{
											"key": "customerNumber",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers with Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'customerNumber',\r",
											"        'customerName',\r",
											"        'contactLastName',\r",
											"        'contactFirstName',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'city',\r",
											"        'state',\r",
											"        'postalCode',\r",
											"        'country',\r",
											"        'salesRepEmployeeNumber',\r",
											"        'creditLimit',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"        'email',\r",
											"        'orders',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'customerName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactLastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactFirstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'state': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'salesRepEmployeeNumber': {\r",
											"          'type': ['integer', 'null']\r",
											"        },\r",
											"        'creditLimit': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [4]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        },\r",
											"        'orders': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'orderNumber',\r",
											"            'orderDate',\r",
											"            'requiredDate',\r",
											"            'shippedDate',\r",
											"            'status',\r",
											"            'comments',\r",
											"            'customerNumber',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'orderNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'orderDate': {\r",
											"              'type': ['string']\r",
											"            },\r",
											"            'requiredDate': {\r",
											"              'type': ['string']\r",
											"            },\r",
											"            'shippedDate': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'status': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'comments': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'customerNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All orders have same \"customerNumber\"', function () {\r",
											"  let customerNumber = pm.response.json().data.customerNumber;\r",
											"  let orders = pm.response.json().data.orders;\r",
											"  pm.expect(orders[0].customerNumber).to.equal(customerNumber);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customers success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('customerNumber', pm.response.json().data.customer.customerNumber + 1)\r",
											"}\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'user',\r",
											"        'customer'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'user': {\r",
											"          'type': 'object',\r",
											"          'required': ['email', 'userNumber'],\r",
											"          'properties': {\r",
											"            'email': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'userNumber': {\r",
											"              'type': 'integer'\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        'customer': {\r",
											"          'type': 'object',\r",
											"          'required': [\r",
											"            'customerName',\r",
											"            'contactLastName',\r",
											"            'contactFirstName',\r",
											"            'phone',\r",
											"            'addressLine1',\r",
											"            'addressLine2',\r",
											"            'city',\r",
											"            'state',\r",
											"            'postalCode',\r",
											"            'country',\r",
											"            'salesRepEmployeeNumber',\r",
											"            'creditLimit',\r",
											"            'userNumber',\r",
											"            'isActive',\r",
											"            'customerNumber',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'customerNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'customerName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'contactLastName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'contactFirstName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'phone': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'addressLine1': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'addressLine2': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'city': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'state': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'postalCode': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'country': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'salesRepEmployeeNumber': {\r",
											"              'type': ['integer', 'null']\r",
											"            },\r",
											"            'creditLimit': {\r",
											"              'type': ['string', 'integer']\r",
											"            },\r",
											"            'userNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'isActive': {\r",
											"              'type': 'integer',\r",
											"              'enum': [0, 1]\r",
											"            }\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('Both Customer & User has been created with same userNumber', function () {\r",
											"  pm.expect(pm.response.json().data.user.userNumber).to.eql(pm.response.json().data.customer.userNumber)\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"Atelier graphique\",\r\n  \"contactLastName\": \"Schmitt\",\r\n  \"contactFirstName\": \"Carine \",\r\n  \"phone\": \"40.32.2555\",\r\n  \"addressLine1\": \"54, rue Royale\",\r\n  \"addressLine2\": \"no where 10 char\",\r\n  \"city\": \"Nantes\",\r\n  \"state\": \"no where\",\r\n  \"postalCode\": \"44000\",\r\n  \"country\": \"France\",\r\n  \"salesRepEmployeeNumber\": 22,\r\n  \"creditLimit\": \"21000.00\",\r\n  \"email\": \"customer{{customerNumber}}@email.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"Atelier graphique\",\r\n  \"contactLastName\": \"Schmitt\",\r\n  \"contactFirstName\": \"Carine \",\r\n  \"phone\": \"40.32.2555\",\r\n  \"addressLine1\": \"54, rue Royale\",\r\n  \"addressLine2\": \"no where 10 char\",\r\n  \"city\": \"Nantes\",\r\n  \"state\": \"no where\",\r\n  \"postalCode\": \"44000\",\r\n  \"country\": \"France\",\r\n  \"salesRepEmployeeNumber\": 1370,\r\n  \"creditLimit\": \"21000.00\",\r\n  \"email\": \"dmurphy@classicmodelcars.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"Atelier graphique\",\r\n  \"contactLastName\": \"Schmitt\",\r\n  \"contactFirstName\": \"Carine \",\r\n  \"phone\": \"40.32.2555\",\r\n  \"addressLine1\": \"54, rue Royale\",\r\n  \"addressLine2\": \"no where 10 char\",\r\n  \"city\": \"Nantes\",\r\n  \"state\": \"no where\",\r\n  \"postalCode\": \"44000\",\r\n  \"country\": \"France\",\r\n  \"salesRepEmployeeNumber\": 1370,\r\n  \"creditLimit\": \"21000.00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customers success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'customerName',\r",
											"        'contactLastName',\r",
											"        'contactFirstName',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'city',\r",
											"        'state',\r",
											"        'postalCode',\r",
											"        'country',\r",
											"        'salesRepEmployeeNumber',\r",
											"        'creditLimit',\r",
											"        'userNumber',\r",
											"        'isActive',\r",
											"        'customerNumber',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'customerName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactLastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactFirstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'state': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'salesRepEmployeeNumber': {\r",
											"          'type': ['integer', 'null']\r",
											"        },\r",
											"        'creditLimit': {\r",
											"          'type': ['string', 'integer']\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"Corporate Gift Ideas Co.\",\r\n  \"contactLastName\": \"Brown\",\r\n  \"contactFirstName\": \"Julie\",\r\n  \"phone\": \"6505551386\",\r\n  \"addressLine1\": \"7734 Strong St.\",\r\n  \"city\": \"San Francisco\",\r\n  \"state\": \"CA\",\r\n  \"postalCode\": \"94217\",\r\n  \"country\": \"USA\",\r\n  \"salesRepEmployeeNumber\": 22,\r\n  \"creditLimit\": \"105000.00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerNumber\": 321,\r\n  \"customerName\": \"Corporate Gift Ideas Co.\",\r\n  \"contactLastName\": \"Brown\",\r\n  \"contactFirstName\": \"Julie\",\r\n  \"phone\": \"6505551386\",\r\n  \"addressLine1\": \"7734 Strong St.\",\r\n  \"addressLine2\": null,\r\n  \"city\": \"San Francisco\",\r\n  \"state\": \"CA\",\r\n  \"postalCode\": \"94217\",\r\n  \"country\": \"USA\",\r\n  \"salesRepEmployeeNumber\": 1165,\r\n  \"creditLimit\": \"105000.00\",\r\n  \"userNumber\": 105,\r\n  \"roleNumber\": 4,\r\n  \"isActive\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "321"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"Corporate Gift Ideas Co.\",\r\n  \"contactLastName\": \"Brown\",\r\n  \"contactFirstName\": \"Julie\",\r\n  \"phone\": \"6505551386\",\r\n  \"addressLine1\": \"7734 Strong St.\",\r\n  \"city\": \"San Francisco\",\r\n  \"state\": \"CA\",\r\n  \"postalCode\": \"94217\",\r\n  \"country\": \"USA\",\r\n  \"salesRepEmployeeNumber\": 99999,\r\n  \"creditLimit\": \"105000.00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "321"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customers success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string',\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "321"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'params': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "Get all Orders searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'orderNumber',\r",
											"        'orderDate',\r",
											"        'requiredDate',\r",
											"        'shippedDate',\r",
											"        'status',\r",
											"        'comments',\r",
											"        'customerNumber',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'orderNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'requiredDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'shippedDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'comments': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									],
									"query": [
										{
											"key": "status",
											"value": "Cancelled",
											"disabled": true
										},
										{
											"key": "orderDate",
											"value": "10-22-2003",
											"disabled": true
										},
										{
											"key": "shippedDate",
											"value": "01-10-2003",
											"disabled": true
										},
										{
											"key": "customerNumber",
											"value": "68",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Orders ERROR field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders?xxx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									],
									"query": [
										{
											"key": "xxx",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Orders ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders?status=Bad Request",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									],
									"query": [
										{
											"key": "status",
											"value": "Bad Request"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order with orderDetail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'orderNumber',\r",
											"        'orderDate',\r",
											"        'requiredDate',\r",
											"        'shippedDate',\r",
											"        'status',\r",
											"        'comments',\r",
											"        'customerNumber',\r",
											"        'orderdetails',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'orderNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'requiredDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'shippedDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'comments': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderdetails': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'orderNumber',\r",
											"            'productCode',\r",
											"            'quantityOrdered',\r",
											"            'priceEach',\r",
											"            'orderLineNumber',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'orderNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'productCode': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'quantityOrdered': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'priceEach': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'orderLineNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"          }\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All ordersDetail have same \"orderNumber\"', function () {\r",
											"  let orderNumber = pm.response.json().data.orderNumber;\r",
											"  let orders = pm.response.json().data.orderdetails;\r",
											"  pm.expect(orders[0].orderNumber).to.equal(orderNumber);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order ERROR field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Orders success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'order': {\r",
											"        'type': 'object',\r",
											"        'required': [\r",
											"          'customerNumber',\r",
											"          'comments',\r",
											"          'orderDate',\r",
											"          'requiredDate',\r",
											"          'status',\r",
											"          'orderNumber',\r",
											"        ],\r",
											"        'properties': {\r",
											"          'customerNumber': {\r",
											"            'type': 'integer'\r",
											"          },\r",
											"          'comments': {\r",
											"            'type': ['string', 'null']\r",
											"          },\r",
											"          'orderDate': {\r",
											"            'type': 'string'\r",
											"          },\r",
											"          'requiredDate': {\r",
											"            'type': 'string'\r",
											"          },\r",
											"          'status': {\r",
											"            'type': 'string'\r",
											"          },\r",
											"          'orderNumber': {\r",
											"            'type': 'integer'\r",
											"          },\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerNumber\": 1,\r\n  \"comments\": null,\r\n  \"orderDate\": \"2021-12-21\",\r\n  \"requiredDate\": \"2021-12-22\",\r\n  \"status\": \"In Process\",\r\n  \"orderLineNumber\": 3,\r\n  \"products\": [\r\n    {\r\n      \"productCode\": \"S10_1678\",\r\n      \"quantityOrdered\": 6\r\n    }\r\n  ],\r\n  \"payment\": {\r\n    \"amount\": 9999,\r\n    \"paymentDate\": \"2021-12-21\",\r\n    \"paymentMethod\": \"COD\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Orders: Product out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerNumber\": 1,\r\n    \"comments\": null,\r\n    \"orderDate\": \"2021-12-21\",\r\n    \"requiredDate\": \"2021-12-22\",\r\n    \"status\": \"In Process\",\r\n    \"orderLineNumber\": 3,\r\n    \"products\": [\r\n        {\r\n            \"productCode\": \"S10_1678\",\r\n            \"quantityOrdered\": 10000\r\n        }\r\n    ],\r\n    \"payment\": {\r\n        \"amount\": 9999,\r\n        \"paymentDate\": \"2021-12-21\",\r\n        \"paymentMethod\": \"COD\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Orders: ERROR missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  400\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comments\": null,\r\n    \"orderDate\": \"2021-12-21\",\r\n    \"requiredDate\": \"2021-12-22\",\r\n    \"status\": \"In Process\",\r\n    \"orderLineNumber\": 3,\r\n    \"products\": [\r\n        {\r\n            \"productCode\": \"S10_1678\",\r\n            \"quantityOrdered\": 10000\r\n        }\r\n    ],\r\n    \"payment\": {\r\n        \"amount\": 9999,\r\n        \"paymentDate\": \"2021-12-21\",\r\n        \"paymentMethod\": \"COD\",\r\n        \"isPaid\": 0\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'comments',\r",
											"        'orderNumber',\r",
											"        'orderDate',\r",
											"        'requiredDate',\r",
											"        'shippedDate',\r",
											"        'status',\r",
											"        'customerNumber',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'comments': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'orderNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'requiredDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'shippedDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"comments\": \"order is updated\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"zzz\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelled order success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelled order ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelled order ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ProductLines",
					"item": [
						{
							"name": "Get All ProductLines searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('productLine', pm.response.json().total + 10000)\r",
											"}\r",
											"const resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data',\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'number',\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'productLine',\r",
											"        'textDescription',\r",
											"        'htmlDescription',\r",
											"        'image',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'productLine': {\r",
											"          'type': 'string',\r",
											"        },\r",
											"        'textDescription': {\r",
											"          'type': ['string', 'null'],\r",
											"        },\r",
											"        'htmlDescription': {\r",
											"          'type': ['string', 'null'],\r",
											"        },\r",
											"        'image': {\r",
											"          'type': ['string', 'null'],\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ProductLines ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines?productLine=nothing",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									],
									"query": [
										{
											"key": "productLine",
											"value": "nothing"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ProductLines ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines?dasdsda=faffafa",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									],
									"query": [
										{
											"key": "dasdsda",
											"value": "faffafa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ProductLines success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"    pm.collectionVariables.set('productLine', (parseInt(pm.response.json().data.productLine) + 1))\r",
											"}\r",
											"\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'productLine',\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null'],\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null',],\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null',],\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"{{productLine}}\",\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ProductLine ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'statusCode',\r",
											"        'error',\r",
											"        'message',\r",
											"        'validation'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'statusCode': {\r",
											"            'type': 'integer'\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'message': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'validation': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'body': {\r",
											"                    'type': 'object',\r",
											"                    'properties': {\r",
											"                        'source': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                        'keys': {\r",
											"                            'type': 'array'\r",
											"                        },\r",
											"                        'message': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"{{productLine}}\",\r\n    \"textDescription\": null,\r\n    \"htmlDescription\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ProductLines ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"10000\",\r\n    \"textDescription\": null,\r\n    \"htmlDescription\": null,\r\n     \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one ProductLine with product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'productLine',\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"                'products'\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'products': {\r",
											"                    'type': 'array',\r",
											"                    'required': [\r",
											"                        'productCode',\r",
											"                        'productName',\r",
											"                        'productLine',\r",
											"                        'productScale',\r",
											"                        'productVendor',\r",
											"                        'productDescription',\r",
											"                        'quantityInStock',\r",
											"                        'buyPrice',\r",
											"                        'MSRP'\r",
											"                    ],\r",
											"                    'properties': {\r",
											"                        'productCode': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productName': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productLine': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productScale': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productVendor': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productDescription': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'quantityInStock': {\r",
											"                            'type': 'number',\r",
											"                        },\r",
											"                        'buyPrice': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'MSRP': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('productlines.productLine === products.productLine', function(){\r",
											"    pm.expect(pm.response.json().data.productLine).to.be.eql(pm.response.json().data.products[0].productLine)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "Classic Cars"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one ProductLine ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"        },\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "'mieuta'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProductLine succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"                'productLine'\r",
											"            ],\r",
											"            'properties': {\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'productLine': {\r",
											"                    'type': 'string'\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": \"chu\",\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProductLine ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"10019\",\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": \"chu\",\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "10019"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProductLine ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": \"chu\",\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "12321312321"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Products",
					"item": [
						{
							"name": "Get all Products searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('productCode', pm.response.json().total + 10000)\r",
											"}\r",
											"\r",
											"const resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data',\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'number',\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        \"productCode\",\r",
											"        \"productName\",\r",
											"        \"productLine\",\r",
											"        \"productScale\",\r",
											"        \"productVendor\",\r",
											"        \"productDescription\",\r",
											"        \"quantityInStock\",\r",
											"        \"buyPrice\",\r",
											"        \"MSRP\"\r",
											"      ],\r",
											"      'properties': {\r",
											"        'productCode': {\r",
											"          'type': 'string',\r",
											"        },\r",
											"        'productDescription': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'productLine': {\r",
											"          'type': 'string',\r",
											"        },\r",
											"        'productName': {\r",
											"          'type': 'string',\r",
											"        },\r",
											"        'productScale': {\r",
											"          'type': 'string',\r",
											"        },\r",
											"        'productVendor': {\r",
											"          'type': 'string',\r",
											"        },\r",
											"        'quantityInStock': {\r",
											"          'type': 'number',\r",
											"        },\r",
											"        'buyPrice': {\r",
											"          'type': 'string',\r",
											"        },\r",
											"        'MSRP': {\r",
											"          'type': 'string',\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Products ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products?productCode=S10_475",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									],
									"query": [
										{
											"key": "productCode",
											"value": "S10_475"
										},
										{
											"key": "productName",
											"value": "1972 Alfa Romeo ",
											"disabled": true
										},
										{
											"key": "productLine",
											"value": "Classic ",
											"disabled": true
										},
										{
											"key": "productScale",
											"value": "1:10",
											"disabled": true
										},
										{
											"key": "productVendor",
											"value": "Motor",
											"disabled": true
										},
										{
											"key": "productDescription",
											"value": "Features include:",
											"disabled": true
										},
										{
											"key": "quantityInStock",
											"value": "32",
											"disabled": true
										},
										{
											"key": "buyPrice",
											"value": "91.02",
											"disabled": true
										},
										{
											"key": "MSRP",
											"value": "13",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"    pm.collectionVariables.set('productCode', (parseInt(pm.response.json().data.productCode) + 1))\r",
											"}\r",
											"\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'productCode',\r",
											"                'productName',\r",
											"                'productLine',\r",
											"                'productScale',\r",
											"                'productVendor',\r",
											"                'productDescription',\r",
											"                'quantityInStock',\r",
											"                'buyPrice',\r",
											"                'MSRP'\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productCode': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productName': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productScale': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productVendor': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productDescription': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'quantityInStock': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'buyPrice': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'MSRP': {\r",
											"                    'type': 'string',\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"{{productCode}}\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10000\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin Diecast\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create product ERROR fileds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'statusCode',\r",
											"        'error',\r",
											"        'message',\r",
											"        'validation'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'statusCode': {\r",
											"            'type': 'integer'\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'message': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'validation': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'body': {\r",
											"                    'type': 'object',\r",
											"                    'properties': {\r",
											"                        'source': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                        'keys': {\r",
											"                            'type': 'array'\r",
											"                        },\r",
											"                        'message': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"{{productCode}}\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin Diecast\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"10000\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10000\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin Diecast\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                \"productName\",\r",
											"                \"productLine\",\r",
											"                \"productScale\",\r",
											"                \"productVendor\",\r",
											"                \"productDescription\",\r",
											"                \"quantityInStock\",\r",
											"                \"buyPrice\",\r",
											"                \"MSRP\",\r",
											"                \"productCode\"\r",
											"            ],\r",
											"            'properties': {\r",
											"                \"productName\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productLine\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productScale\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productVendor\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productDescription\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"quantityInStock\": {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                \"buyPrice\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"MSRP\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productCode\": {\r",
											"                    'type': 'string',\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10000\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"10000\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate Ultra\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "daugsduahsdiay"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all Product's quantity success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                \"productName\",\r",
											"                \"productLine\",\r",
											"                \"productScale\",\r",
											"                \"productVendor\",\r",
											"                \"productDescription\",\r",
											"                \"quantityInStock\",\r",
											"                \"buyPrice\",\r",
											"                \"MSRP\",\r",
											"                \"productCode\"\r",
											"            ],\r",
											"            'properties': {\r",
											"                \"productName\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productLine\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productScale\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productVendor\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productDescription\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"quantityInStock\": {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                \"buyPrice\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"MSRP\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productCode\": {\r",
											"                    'type': 'string',\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"quantityInStock is equal to 0\", function () {\r",
											"    pm.expect(pm.response.json().data.quantityInStock).to.be.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all Product's quantity ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "hduajhasdaajas"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "Update Payments success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"COD\",\r\n    \"paymentDate\": \"2021-12-12\",\r\n    \"isPaid\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payments ERROR value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"COD\",\r\n    \"paymentDate\": \"2021-12-12\",\r\n    \"isPaid\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payments ERROR fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"ABCD\",\r\n    \"paymentDate\": \"2021-12-12\",\r\n    \"isPaid\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Manager",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Login success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code < 300) {\r",
											"  pm.collectionVariables.set('token', pm.response.json().data.accessToken)\r",
											"}\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'accessToken'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'accessToken': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 200 when login success', function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('\"token\" has been saved to collectionVariables', function () {\r",
											"  pm.expect(pm.response.json().data.accessToken).to.eql(pm.collectionVariables.get('token'));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"abow@classicmodelcars.com\",\r\n    \"password\": \"Abcd@1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login ERROR incorrect info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 401 when login error due incorrect info', function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dmurphy@classicmodelcars.com\",\r\n    \"password\": \"Abcd@12341\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login ERROR missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 when login error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dmurphy@classicmodelcars.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offices",
					"item": [
						{
							"name": "Get all Offices ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Office with Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offices ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"officeCode\": \"1\",\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Offices ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Employees",
					"item": [
						{
							"name": "Get all Employees searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let datalength = pm.response.json().data.length\r",
											"let arrNum = [];\r",
											"if (pm.response.code < 400) {\r",
											"  for (let i = 0; i < datalength; i++) {\r",
											"    arrNum.push(pm.response.json().data[i].employeeNumber);\r",
											"  }\r",
											"  pm.collectionVariables.set('employeeNumber', Math.max(...arrNum) + 1)\r",
											"}\r",
											"\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'employeeNumber',\r",
											"        'lastName',\r",
											"        'firstName',\r",
											"        'extension',\r",
											"        'officeCode',\r",
											"        'reportsTo',\r",
											"        'jobTitle',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"        'email',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'employeeNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'lastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'firstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'extension': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'reportsTo': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'jobTitle': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [1, 2, 3]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        },\r",
											"        'email': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									],
									"query": [
										{
											"key": "employeeNumber",
											"value": "1088",
											"disabled": true
										},
										{
											"key": "lastName",
											"value": "Patterson",
											"disabled": true
										},
										{
											"key": "firstName",
											"value": "Gerard",
											"disabled": true
										},
										{
											"key": "extension",
											"value": "x102",
											"disabled": true
										},
										{
											"key": "officeCode",
											"value": "2",
											"disabled": true
										},
										{
											"key": "reportsTo",
											"value": "1002",
											"disabled": true
										},
										{
											"key": "jobTitle",
											"value": "VP Sales",
											"disabled": true
										},
										{
											"key": "roleNumber",
											"value": "2",
											"disabled": true
										},
										{
											"key": "isActive",
											"value": "0",
											"disabled": true
										},
										{
											"key": "email",
											"value": "gbondur@classicmodelcars.com",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Employees ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees?employeeNumber=101010&lastName=son&firstName=li",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									],
									"query": [
										{
											"key": "employeeNumber",
											"value": "101010"
										},
										{
											"key": "lastName",
											"value": "son"
										},
										{
											"key": "firstName",
											"value": "li"
										},
										{
											"key": "extension",
											"value": "x5",
											"disabled": true
										},
										{
											"key": "officeCode",
											"value": "2",
											"disabled": true
										},
										{
											"key": "reportsTo",
											"value": "1002",
											"disabled": true
										},
										{
											"key": "jobTitle",
											"value": "ger",
											"disabled": true
										},
										{
											"key": "userNumber",
											"value": "1",
											"disabled": true
										},
										{
											"key": "roleNumber",
											"value": "2",
											"disabled": true
										},
										{
											"key": "isActive",
											"value": "0",
											"disabled": true
										},
										{
											"key": "email",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Employees ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees?employeeNum=101010",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									],
									"query": [
										{
											"key": "employeeNum",
											"value": "101010"
										},
										{
											"key": "lastName",
											"value": "son",
											"disabled": true
										},
										{
											"key": "firstName",
											"value": "li",
											"disabled": true
										},
										{
											"key": "extension",
											"value": "x5",
											"disabled": true
										},
										{
											"key": "officeCode",
											"value": "2",
											"disabled": true
										},
										{
											"key": "reportsTo",
											"value": "1002",
											"disabled": true
										},
										{
											"key": "jobTitle",
											"value": "ger",
											"disabled": true
										},
										{
											"key": "userNumber",
											"value": "1",
											"disabled": true
										},
										{
											"key": "roleNumber",
											"value": "2",
											"disabled": true
										},
										{
											"key": "isActive",
											"value": "0",
											"disabled": true
										},
										{
											"key": "email",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Employees with Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'employeeNumber',\r",
											"        'lastName',\r",
											"        'firstName',\r",
											"        'extension',\r",
											"        'officeCode',\r",
											"        'reportsTo',\r",
											"        'jobTitle',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"        'email',\r",
											"        'customers'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'employeeNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'lastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'firstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'extension': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'reportsTo': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'jobTitle': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [1, 2, 3]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        },\r",
											"        'email': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'customers': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'customerNumber',\r",
											"            'customerName',\r",
											"            'contactLastName',\r",
											"            'contactFirstName',\r",
											"            'phone',\r",
											"            'addressLine1',\r",
											"            'addressLine2',\r",
											"            'city',\r",
											"            'state',\r",
											"            'postalCode',\r",
											"            'country',\r",
											"            'salesRepEmployeeNumber',\r",
											"            'creditLimit',\r",
											"            'userNumber',\r",
											"            'roleNumber',\r",
											"            'isActive',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'customerNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'customerName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'contactLastName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'contactFirstName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'phone': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'addressLine1': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'addressLine2': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'city': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'state': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'postalCode': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'country': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'salesRepEmployeeNumber': {\r",
											"              'type': ['integer', 'null']\r",
											"            },\r",
											"            'creditLimit': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'userNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'roleNumber': {\r",
											"              'type': 'integer',\r",
											"              'enum': [4]\r",
											"            },\r",
											"            'isActive': {\r",
											"              'type': 'integer',\r",
											"              'enum': [0, 1]\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All customers have same \"salesRepEmployeeNumber\"', function () {\r",
											"  let employeeNumber = pm.response.json().data.employeeNumber;\r",
											"  let customers = pm.response.json().data.customers;\r",
											"  pm.expect(customers[0].salesRepEmployeeNumber).to.equal(employeeNumber);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Employees ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "161161"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Employees ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Employees success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('employeeNumber', pm.response.json().data.employee.employeeNumber + 1)\r",
											"}\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'user',\r",
											"        'employee'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'user': {\r",
											"          'type': 'object',\r",
											"          'required': ['email', 'userNumber'],\r",
											"          'properties': {\r",
											"            'email': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'userNumber': {\r",
											"              'type': 'integer'\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        'employee': {\r",
											"          'type': 'object',\r",
											"          'required': [\r",
											"            'employeeNumber',\r",
											"            'lastName',\r",
											"            'firstName',\r",
											"            'extension',\r",
											"            'officeCode',\r",
											"            'jobTitle',\r",
											"            'userNumber',\r",
											"            'isActive',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'employeeNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'lastName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'firstName': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'extension': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'officeCode': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'jobTitle': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'userNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'isActive': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('Both Employee & User has been created with same userNumber', function () {\r",
											"  pm.expect(pm.response.json().data.user.userNumber).to.eql(pm.response.json().data.employee.userNumber)\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Murphy\",\r\n  \"firstName\": \"Diane\",\r\n  \"extension\": \"x5800\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": null,\r\n  \"jobTitle\": \"Staff\",\r\n  \"email\": \"employee{{employeeNumber}}@email.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Employees ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Murphy\",\r\n  \"firstName\": \"Diane\",\r\n  \"extension\": \"x5800\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": null,\r\n  \"jobTitle\": \"Staff\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Employees ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Murphy\",\r\n  \"firstName\": \"Diane\",\r\n  \"extension\": \"x5800\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": null,\r\n  \"jobTitle\": \"Staff\",\r\n  \"email\": \"dmurphy@classicmodelcars.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Employees ERROR authozied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Murphy\",\r\n  \"firstName\": \"Diane\",\r\n  \"extension\": \"x5800\",\r\n  \"officeCode\": \"7\",\r\n  \"reportsTo\": null,\r\n  \"jobTitle\": \"Staff\",\r\n  \"email\": \"employee@email.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employees success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'employeeNumber',\r",
											"        'lastName',\r",
											"        'firstName',\r",
											"        'extension',\r",
											"        'officeCode',\r",
											"        'jobTitle',\r",
											"        'userNumber',\r",
											"        'isActive',\r",
											"        'roleNumber'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'employeeNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'lastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'firstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'extension': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'officeCode': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'jobTitle': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": 1,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employees ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"employeeNumber\": 1188,\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "1188"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employees ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  401\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employees ERROR 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  404\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customers",
					"item": [
						{
							"name": "Get all Customers searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let datalength = pm.response.json().data.length\r",
											"let arrNum = [];\r",
											"if (pm.response.code < 400) {\r",
											"  for (let i = 0; i < datalength; i++) {\r",
											"    arrNum.push(pm.response.json().data[i].customerNumber);\r",
											"  }\r",
											"  pm.collectionVariables.set('customerNumber', Math.max(...arrNum) + 1)\r",
											"}\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'customerNumber',\r",
											"        'customerName',\r",
											"        'contactLastName',\r",
											"        'contactFirstName',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'city',\r",
											"        'state',\r",
											"        'postalCode',\r",
											"        'country',\r",
											"        'salesRepEmployeeNumber',\r",
											"        'creditLimit',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'customerName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactLastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactFirstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'state': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'salesRepEmployeeNumber': {\r",
											"          'type': ['integer', 'null']\r",
											"        },\r",
											"        'creditLimit': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [4]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									],
									"query": [
										{
											"key": "customerName",
											"value": "Australian Collectors, Co.",
											"disabled": true
										},
										{
											"key": "contactFirstName",
											"value": "Jean",
											"disabled": true
										},
										{
											"key": "phone",
											"value": "40.32.2555",
											"disabled": true
										},
										{
											"key": "addressLine1",
											"value": "8489 Strong St.",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Nantes",
											"disabled": true
										},
										{
											"key": "state",
											"value": "NY",
											"disabled": true
										},
										{
											"key": "postalCode",
											"value": "44000",
											"disabled": true
										},
										{
											"key": "country",
											"value": "France",
											"disabled": true
										},
										{
											"key": "salesRepEmployeeNumber",
											"value": "1370",
											"disabled": true
										},
										{
											"key": "creditLimit",
											"value": "21000",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers?phone=9999999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									],
									"query": [
										{
											"key": "phone",
											"value": "9999999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers?customerNumber=123",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									],
									"query": [
										{
											"key": "customerNumber",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers with Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'customerNumber',\r",
											"        'customerName',\r",
											"        'contactLastName',\r",
											"        'contactFirstName',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'city',\r",
											"        'state',\r",
											"        'postalCode',\r",
											"        'country',\r",
											"        'salesRepEmployeeNumber',\r",
											"        'creditLimit',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"        'email',\r",
											"        'orders',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'customerName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactLastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactFirstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'state': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'salesRepEmployeeNumber': {\r",
											"          'type': ['integer', 'null']\r",
											"        },\r",
											"        'creditLimit': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [4]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        },\r",
											"        'orders': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'orderNumber',\r",
											"            'orderDate',\r",
											"            'requiredDate',\r",
											"            'shippedDate',\r",
											"            'status',\r",
											"            'comments',\r",
											"            'customerNumber',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'orderNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'orderDate': {\r",
											"              'type': ['string']\r",
											"            },\r",
											"            'requiredDate': {\r",
											"              'type': ['string']\r",
											"            },\r",
											"            'shippedDate': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'status': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'comments': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'customerNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All orders have same \"customerNumber\"', function () {\r",
											"  let customerNumber = pm.response.json().data.customerNumber;\r",
											"  let orders = pm.response.json().data.orders;\r",
											"  pm.expect(orders[0].customerNumber).to.equal(customerNumber);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customers ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"Atelier graphique\",\r\n  \"contactLastName\": \"Schmitt\",\r\n  \"contactFirstName\": \"Carine \",\r\n  \"phone\": \"40.32.2555\",\r\n  \"addressLine1\": \"54, rue Royale\",\r\n  \"addressLine2\": \"no where 10 char\",\r\n  \"city\": \"Nantes\",\r\n  \"state\": \"no where\",\r\n  \"postalCode\": \"44000\",\r\n  \"country\": \"France\",\r\n  \"salesRepEmployeeNumber\": 1370,\r\n  \"creditLimit\": \"21000.00\",\r\n  \"email\": \"dmurphy@classicmodelcars.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customers ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerNumber\": 321,\r\n  \"customerName\": \"Corporate Gift Ideas Co.\",\r\n  \"contactLastName\": \"Brown\",\r\n  \"contactFirstName\": \"Julie\",\r\n  \"phone\": \"6505551386\",\r\n  \"addressLine1\": \"7734 Strong St.\",\r\n  \"addressLine2\": null,\r\n  \"city\": \"San Francisco\",\r\n  \"state\": \"CA\",\r\n  \"postalCode\": \"94217\",\r\n  \"country\": \"USA\",\r\n  \"salesRepEmployeeNumber\": 1165,\r\n  \"creditLimit\": \"105000.00\",\r\n  \"userNumber\": 105,\r\n  \"roleNumber\": 4,\r\n  \"isActive\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "321"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customers ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ProductLines",
					"item": [
						{
							"name": "Get All ProductLines searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('productLine', pm.response.json().total + 10000)\r",
											"}\r",
											"\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'total',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'total': {\r",
											"            'type': 'number',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"            'required': [\r",
											"                'productLine',\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null'],\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null'],\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null'],\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ProductLines ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines?productLine=nothing",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									],
									"query": [
										{
											"key": "productLine",
											"value": "nothing"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ProductLines ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines?dasdsda=faffafa",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									],
									"query": [
										{
											"key": "dasdsda",
											"value": "faffafa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ProductLines success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"    pm.collectionVariables.set('productLine', (parseInt(pm.response.json().data.productLine) + 1))\r",
											"}\r",
											"\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'productLine',\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null'],\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null',],\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null',],\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"{{productLine}}\",\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ProductLine ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'statusCode',\r",
											"        'error',\r",
											"        'message',\r",
											"        'validation'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'statusCode': {\r",
											"            'type': 'integer'\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'message': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'validation': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'body': {\r",
											"                    'type': 'object',\r",
											"                    'properties': {\r",
											"                        'source': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                        'keys': {\r",
											"                            'type': 'array'\r",
											"                        },\r",
											"                        'message': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"{{productLine}}\",\r\n    \"textDescription\": null,\r\n    \"htmlDescription\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ProductLines ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"10000\",\r\n    \"textDescription\": null,\r\n    \"htmlDescription\": null,\r\n     \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one ProductLine with product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'productLine',\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"                'products'\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'products': {\r",
											"                    'type': 'array',\r",
											"                    'required': [\r",
											"                        'productCode',\r",
											"                        'productName',\r",
											"                        'productLine',\r",
											"                        'productScale',\r",
											"                        'productVendor',\r",
											"                        'productDescription',\r",
											"                        'quantityInStock',\r",
											"                        'buyPrice',\r",
											"                        'MSRP'\r",
											"                    ],\r",
											"                    'properties': {\r",
											"                        'productCode': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productName': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productLine': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productScale': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productVendor': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productDescription': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'quantityInStock': {\r",
											"                            'type': 'number',\r",
											"                        },\r",
											"                        'buyPrice': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'MSRP': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('productlines.productLine === products.productLine', function(){\r",
											"    pm.expect(pm.response.json().data.productLine).to.be.eql(pm.response.json().data.products[0].productLine)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "Classic Cars"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one ProductLine ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"        },\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "'mieuta'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProductLine succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"                'productLine'\r",
											"            ],\r",
											"            'properties': {\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'productLine': {\r",
											"                    'type': 'string'\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": \"chu\",\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProductLine ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"10019\",\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": \"chu\",\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "10019"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProductLine ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": \"chu\",\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "12321312321"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Products",
					"item": [
						{
							"name": "Get all Products searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('productCode', pm.response.json().total + 10000)\r",
											"}\r",
											"\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'total',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'data': {\r",
											"            'type': 'number',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"            'required': [\r",
											"                \"productCode\",\r",
											"                \"productName\",\r",
											"                \"productLine\",\r",
											"                \"productScale\",\r",
											"                \"productVendor\",\r",
											"                \"productDescription\",\r",
											"                \"quantityInStock\",\r",
											"                \"buyPrice\",\r",
											"                \"MSRP\"\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productCode': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productDescription': {\r",
											"                    'type': 'string'\r",
											"                },\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productName': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productScale': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productVendor': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'quantityInStock': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'buyPrice': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'MSRP': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Products ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products?productCode=S10_475",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									],
									"query": [
										{
											"key": "productCode",
											"value": "S10_475"
										},
										{
											"key": "productName",
											"value": "1972 Alfa Romeo ",
											"disabled": true
										},
										{
											"key": "productLine",
											"value": "Classic ",
											"disabled": true
										},
										{
											"key": "productScale",
											"value": "1:10",
											"disabled": true
										},
										{
											"key": "productVendor",
											"value": "Motor",
											"disabled": true
										},
										{
											"key": "productDescription",
											"value": "Features include:",
											"disabled": true
										},
										{
											"key": "quantityInStock",
											"value": "32",
											"disabled": true
										},
										{
											"key": "buyPrice",
											"value": "91.02",
											"disabled": true
										},
										{
											"key": "MSRP",
											"value": "13",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Products ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products?dasdsda=faffafa",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									],
									"query": [
										{
											"key": "dasdsda",
											"value": "faffafa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"    pm.collectionVariables.set('productCode', (parseInt(pm.response.json().data.productCode) + 1))\r",
											"}\r",
											"\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'productCode',\r",
											"                'productName',\r",
											"                'productLine',\r",
											"                'productScale',\r",
											"                'productVendor',\r",
											"                'productDescription',\r",
											"                'quantityInStock',\r",
											"                'buyPrice',\r",
											"                'MSRP'\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productCode': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productName': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productScale': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productVendor': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productDescription': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'quantityInStock': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'buyPrice': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'MSRP': {\r",
											"                    'type': 'string',\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"{{productCode}}\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10000\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin Diecast\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create product ERROR fileds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'statusCode',\r",
											"        'error',\r",
											"        'message',\r",
											"        'validation'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'statusCode': {\r",
											"            'type': 'integer'\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'message': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'validation': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'body': {\r",
											"                    'type': 'object',\r",
											"                    'properties': {\r",
											"                        'source': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                        'keys': {\r",
											"                            'type': 'array'\r",
											"                        },\r",
											"                        'message': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"{{productCode}}\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin Diecast\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"10000\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10000\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin Diecast\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                \"productName\",\r",
											"                \"productLine\",\r",
											"                \"productScale\",\r",
											"                \"productVendor\",\r",
											"                \"productDescription\",\r",
											"                \"quantityInStock\",\r",
											"                \"buyPrice\",\r",
											"                \"MSRP\",\r",
											"                \"productCode\"\r",
											"            ],\r",
											"            'properties': {\r",
											"                \"productName\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productLine\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productScale\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productVendor\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productDescription\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"quantityInStock\": {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                \"buyPrice\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"MSRP\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productCode\": {\r",
											"                    'type': 'string',\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10000\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"10000\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate Ultra\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "daugsduahsdiay"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all Product's quantity success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                \"productName\",\r",
											"                \"productLine\",\r",
											"                \"productScale\",\r",
											"                \"productVendor\",\r",
											"                \"productDescription\",\r",
											"                \"quantityInStock\",\r",
											"                \"buyPrice\",\r",
											"                \"MSRP\",\r",
											"                \"productCode\"\r",
											"            ],\r",
											"            'properties': {\r",
											"                \"productName\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productLine\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productScale\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productVendor\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productDescription\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"quantityInStock\": {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                \"buyPrice\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"MSRP\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productCode\": {\r",
											"                    'type': 'string',\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"quantityInStock is equal to 0\", function () {\r",
											"    pm.expect(pm.response.json().data.quantityInStock).to.be.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all Product's quantity ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "hduajhasdaajas"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "Get all Orders searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'orderNumber',\r",
											"        'orderDate',\r",
											"        'requiredDate',\r",
											"        'shippedDate',\r",
											"        'status',\r",
											"        'comments',\r",
											"        'customerNumber',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'orderNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'requiredDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'shippedDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'comments': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									],
									"query": [
										{
											"key": "status",
											"value": "Cancelled",
											"disabled": true
										},
										{
											"key": "orderDate",
											"value": "10-22-2003",
											"disabled": true
										},
										{
											"key": "shippedDate",
											"value": "01-10-2003",
											"disabled": true
										},
										{
											"key": "customerNumber",
											"value": "68",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Orders ERROR field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders?xxx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									],
									"query": [
										{
											"key": "xxx",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Orders ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders?status=Bad Request",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									],
									"query": [
										{
											"key": "status",
											"value": "Bad Request"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order with orderDetail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'orderNumber',\r",
											"        'orderDate',\r",
											"        'requiredDate',\r",
											"        'shippedDate',\r",
											"        'status',\r",
											"        'comments',\r",
											"        'customerNumber',\r",
											"        'orderdetails',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'orderNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'requiredDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'shippedDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'comments': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderdetails': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'orderNumber',\r",
											"            'productCode',\r",
											"            'quantityOrdered',\r",
											"            'priceEach',\r",
											"            'orderLineNumber',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'orderNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'productCode': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'quantityOrdered': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'priceEach': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'orderLineNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"          }\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All ordersDetail have same \"orderNumber\"', function () {\r",
											"  let orderNumber = pm.response.json().data.orderNumber;\r",
											"  let orders = pm.response.json().data.orderdetails;\r",
											"  pm.expect(orders[0].orderNumber).to.equal(orderNumber);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order ERROR field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Orders success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'order': {\r",
											"        'type': 'object',\r",
											"        'required': [\r",
											"          'customerNumber',\r",
											"          'comments',\r",
											"          'orderDate',\r",
											"          'requiredDate',\r",
											"          'status',\r",
											"          'orderNumber',\r",
											"        ],\r",
											"        'properties': {\r",
											"          'customerNumber': {\r",
											"            'type': 'integer'\r",
											"          },\r",
											"          'comments': {\r",
											"            'type': ['string', 'null']\r",
											"          },\r",
											"          'orderDate': {\r",
											"            'type': 'string'\r",
											"          },\r",
											"          'requiredDate': {\r",
											"            'type': 'string'\r",
											"          },\r",
											"          'status': {\r",
											"            'type': 'string'\r",
											"          },\r",
											"          'orderNumber': {\r",
											"            'type': 'integer'\r",
											"          },\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerNumber\": 1,\r\n  \"comments\": null,\r\n  \"orderDate\": \"2021-12-21\",\r\n  \"requiredDate\": \"2021-12-22\",\r\n  \"status\": \"In Process\",\r\n  \"orderLineNumber\": 3,\r\n  \"products\": [\r\n    {\r\n      \"productCode\": \"S10_1678\",\r\n      \"quantityOrdered\": 6\r\n    }\r\n  ],\r\n  \"payment\": {\r\n    \"amount\": 9999,\r\n    \"paymentDate\": \"2021-12-21\",\r\n    \"paymentMethod\": \"COD\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Orders: Product out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerNumber\": 1,\r\n    \"comments\": null,\r\n    \"orderDate\": \"2021-12-21\",\r\n    \"requiredDate\": \"2021-12-22\",\r\n    \"status\": \"In Process\",\r\n    \"orderLineNumber\": 3,\r\n    \"products\": [\r\n        {\r\n            \"productCode\": \"S10_1678\",\r\n            \"quantityOrdered\": 10000\r\n        }\r\n    ],\r\n    \"payment\": {\r\n        \"amount\": 9999,\r\n        \"paymentDate\": \"2021-12-21\",\r\n        \"paymentMethod\": \"COD\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Orders: ERROR missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  400\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comments\": null,\r\n    \"orderDate\": \"2021-12-21\",\r\n    \"requiredDate\": \"2021-12-22\",\r\n    \"status\": \"In Process\",\r\n    \"orderLineNumber\": 3,\r\n    \"products\": [\r\n        {\r\n            \"productCode\": \"S10_1678\",\r\n            \"quantityOrdered\": 10000\r\n        }\r\n    ],\r\n    \"payment\": {\r\n        \"amount\": 9999,\r\n        \"paymentDate\": \"2021-12-21\",\r\n        \"paymentMethod\": \"COD\",\r\n        \"isPaid\": 0\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'comments',\r",
											"        'orderNumber',\r",
											"        'orderDate',\r",
											"        'requiredDate',\r",
											"        'shippedDate',\r",
											"        'status',\r",
											"        'customerNumber',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'comments': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'orderNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'requiredDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'shippedDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comments\": \"order is updated\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"zzz\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelled order success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelled order ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelled order ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "Update Payments success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"COD\",\r\n    \"paymentDate\": \"2021-12-12\",\r\n    \"isPaid\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payments ERROR value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"COD\",\r\n    \"paymentDate\": \"2021-12-12\",\r\n    \"isPaid\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payments ERROR fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"ABCD\",\r\n    \"paymentDate\": \"2021-12-12\",\r\n    \"isPaid\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Staff",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Login success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code < 300) {\r",
											"  pm.collectionVariables.set('token', pm.response.json().data.accessToken)\r",
											"}\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'accessToken'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'accessToken': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 200 when login success', function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('\"token\" has been saved to collectionVariables', function () {\r",
											"  pm.expect(pm.response.json().data.accessToken).to.eql(pm.collectionVariables.get('token'));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"ljennings@classicmodelcars.com\",\r\n    \"password\": \"Abcd@1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login ERROR incorrect info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 401 when login error due incorrect info', function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dmurphy@classicmodelcars.com\",\r\n    \"password\": \"Abcd@12341\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login ERROR missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 when login error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dmurphy@classicmodelcars.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offices",
					"item": [
						{
							"name": "Get all Offices ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Office with Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offices ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"officeCode\": \"1\",\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Offices ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Employees",
					"item": [
						{
							"name": "Get all Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									],
									"query": [
										{
											"key": "employeeNum",
											"value": "101010",
											"disabled": true
										},
										{
											"key": "lastName",
											"value": "son",
											"disabled": true
										},
										{
											"key": "firstName",
											"value": "li",
											"disabled": true
										},
										{
											"key": "extension",
											"value": "x5",
											"disabled": true
										},
										{
											"key": "officeCode",
											"value": "2",
											"disabled": true
										},
										{
											"key": "reportsTo",
											"value": "1002",
											"disabled": true
										},
										{
											"key": "jobTitle",
											"value": "ger",
											"disabled": true
										},
										{
											"key": "userNumber",
											"value": "1",
											"disabled": true
										},
										{
											"key": "roleNumber",
											"value": "2",
											"disabled": true
										},
										{
											"key": "isActive",
											"value": "0",
											"disabled": true
										},
										{
											"key": "email",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Murphy\",\r\n  \"firstName\": \"Diane\",\r\n  \"extension\": \"x5800\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": null,\r\n  \"jobTitle\": \"Staff\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"employeeNumber\": 1188,\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "1188"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customers",
					"item": [
						{
							"name": "Get all Customers searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let datalength = pm.response.json().data.length\r",
											"let arrNum = [];\r",
											"if (pm.response.code < 400) {\r",
											"  for (let i = 0; i < datalength; i++) {\r",
											"    arrNum.push(pm.response.json().data[i].customerNumber);\r",
											"  }\r",
											"  pm.collectionVariables.set('customerNumber', Math.max(...arrNum) + 1)\r",
											"}\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'customerNumber',\r",
											"        'customerName',\r",
											"        'contactLastName',\r",
											"        'contactFirstName',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'city',\r",
											"        'state',\r",
											"        'postalCode',\r",
											"        'country',\r",
											"        'salesRepEmployeeNumber',\r",
											"        'creditLimit',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'customerName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactLastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactFirstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'state': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'salesRepEmployeeNumber': {\r",
											"          'type': ['integer', 'null']\r",
											"        },\r",
											"        'creditLimit': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [4]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									],
									"query": [
										{
											"key": "customerName",
											"value": "Australian Collectors, Co.",
											"disabled": true
										},
										{
											"key": "contactFirstName",
											"value": "Jean",
											"disabled": true
										},
										{
											"key": "phone",
											"value": "40.32.2555",
											"disabled": true
										},
										{
											"key": "addressLine1",
											"value": "8489 Strong St.",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Nantes",
											"disabled": true
										},
										{
											"key": "state",
											"value": "NY",
											"disabled": true
										},
										{
											"key": "postalCode",
											"value": "44000",
											"disabled": true
										},
										{
											"key": "country",
											"value": "France",
											"disabled": true
										},
										{
											"key": "salesRepEmployeeNumber",
											"value": "1370",
											"disabled": true
										},
										{
											"key": "creditLimit",
											"value": "21000",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers?phone=9999999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									],
									"query": [
										{
											"key": "phone",
											"value": "9999999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers?customerNumber=123",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									],
									"query": [
										{
											"key": "customerNumber",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers with Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'customerNumber',\r",
											"        'customerName',\r",
											"        'contactLastName',\r",
											"        'contactFirstName',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'city',\r",
											"        'state',\r",
											"        'postalCode',\r",
											"        'country',\r",
											"        'salesRepEmployeeNumber',\r",
											"        'creditLimit',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"        'email',\r",
											"        'orders',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'customerName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactLastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactFirstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'state': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'salesRepEmployeeNumber': {\r",
											"          'type': ['integer', 'null']\r",
											"        },\r",
											"        'creditLimit': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [4]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        },\r",
											"        'orders': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'orderNumber',\r",
											"            'orderDate',\r",
											"            'requiredDate',\r",
											"            'shippedDate',\r",
											"            'status',\r",
											"            'comments',\r",
											"            'customerNumber',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'orderNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'orderDate': {\r",
											"              'type': ['string']\r",
											"            },\r",
											"            'requiredDate': {\r",
											"              'type': ['string']\r",
											"            },\r",
											"            'shippedDate': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'status': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'comments': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'customerNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All orders have same \"customerNumber\"', function () {\r",
											"  let customerNumber = pm.response.json().data.customerNumber;\r",
											"  let orders = pm.response.json().data.orders;\r",
											"  pm.expect(orders[0].customerNumber).to.equal(customerNumber);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customers ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"Atelier graphique\",\r\n  \"contactLastName\": \"Schmitt\",\r\n  \"contactFirstName\": \"Carine \",\r\n  \"phone\": \"40.32.2555\",\r\n  \"addressLine1\": \"54, rue Royale\",\r\n  \"addressLine2\": \"no where 10 char\",\r\n  \"city\": \"Nantes\",\r\n  \"state\": \"no where\",\r\n  \"postalCode\": \"44000\",\r\n  \"country\": \"France\",\r\n  \"salesRepEmployeeNumber\": 1370,\r\n  \"creditLimit\": \"21000.00\",\r\n  \"email\": \"dmurphy@classicmodelcars.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customers ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerNumber\": 321,\r\n  \"customerName\": \"Corporate Gift Ideas Co.\",\r\n  \"contactLastName\": \"Brown\",\r\n  \"contactFirstName\": \"Julie\",\r\n  \"phone\": \"6505551386\",\r\n  \"addressLine1\": \"7734 Strong St.\",\r\n  \"addressLine2\": null,\r\n  \"city\": \"San Francisco\",\r\n  \"state\": \"CA\",\r\n  \"postalCode\": \"94217\",\r\n  \"country\": \"USA\",\r\n  \"salesRepEmployeeNumber\": 1165,\r\n  \"creditLimit\": \"105000.00\",\r\n  \"userNumber\": 105,\r\n  \"roleNumber\": 4,\r\n  \"isActive\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "321"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customers ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ProductLines",
					"item": [
						{
							"name": "Get All ProductLines searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('productLine', pm.response.json().total + 10000)\r",
											"}\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'total',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'total': {\r",
											"            'type': 'number',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"            'required': [\r",
											"                'productLine',\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null'],\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null'],\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null'],\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ProductLines ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines?productLine=nothing",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									],
									"query": [
										{
											"key": "productLine",
											"value": "nothing"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ProductLines ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines?dasdsda=faffafa",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									],
									"query": [
										{
											"key": "dasdsda",
											"value": "faffafa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ProductLines success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"    pm.collectionVariables.set('productLine', (parseInt(pm.response.json().data.productLine) + 1))\r",
											"}\r",
											"\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'productLine',\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null'],\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null',],\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null',],\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"{{productLine}}\",\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ProductLine ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'statusCode',\r",
											"        'error',\r",
											"        'message',\r",
											"        'validation'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'statusCode': {\r",
											"            'type': 'integer'\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'message': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'validation': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'body': {\r",
											"                    'type': 'object',\r",
											"                    'properties': {\r",
											"                        'source': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                        'keys': {\r",
											"                            'type': 'array'\r",
											"                        },\r",
											"                        'message': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"{{productLine}}\",\r\n    \"textDescription\": null,\r\n    \"htmlDescription\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ProductLines ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"10000\",\r\n    \"textDescription\": null,\r\n    \"htmlDescription\": null,\r\n     \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one ProductLine with product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'productLine',\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"                'products'\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'products': {\r",
											"                    'type': 'array',\r",
											"                    'required': [\r",
											"                        'productCode',\r",
											"                        'productName',\r",
											"                        'productLine',\r",
											"                        'productScale',\r",
											"                        'productVendor',\r",
											"                        'productDescription',\r",
											"                        'quantityInStock',\r",
											"                        'buyPrice',\r",
											"                        'MSRP'\r",
											"                    ],\r",
											"                    'properties': {\r",
											"                        'productCode': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productName': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productLine': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productScale': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productVendor': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productDescription': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'quantityInStock': {\r",
											"                            'type': 'number',\r",
											"                        },\r",
											"                        'buyPrice': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'MSRP': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('productlines.productLine === products.productLine', function(){\r",
											"    pm.expect(pm.response.json().data.productLine).to.be.eql(pm.response.json().data.products[0].productLine)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "Classic Cars"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one ProductLine ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"        },\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "'mieuta'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProductLine succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"                'productLine'\r",
											"            ],\r",
											"            'properties': {\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'productLine': {\r",
											"                    'type': 'string'\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": \"chu\",\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProductLine ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"10019\",\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": \"chu\",\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "10019"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProductLine ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": \"chu\",\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "12321312321"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Product",
					"item": [
						{
							"name": "Get all Products searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('productCode', pm.response.json().total + 10000)\r",
											"}\r",
											"\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'total',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'data': {\r",
											"            'type': 'number',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"            'required': [\r",
											"                \"productCode\",\r",
											"                \"productName\",\r",
											"                \"productLine\",\r",
											"                \"productScale\",\r",
											"                \"productVendor\",\r",
											"                \"productDescription\",\r",
											"                \"quantityInStock\",\r",
											"                \"buyPrice\",\r",
											"                \"MSRP\"\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productCode': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productDescription': {\r",
											"                    'type': 'string'\r",
											"                },\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productName': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productScale': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productVendor': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'quantityInStock': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'buyPrice': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'MSRP': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Products ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products?productCode=S10_475",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									],
									"query": [
										{
											"key": "productCode",
											"value": "S10_475"
										},
										{
											"key": "productName",
											"value": "1972 Alfa Romeo ",
											"disabled": true
										},
										{
											"key": "productLine",
											"value": "Classic ",
											"disabled": true
										},
										{
											"key": "productScale",
											"value": "1:10",
											"disabled": true
										},
										{
											"key": "productVendor",
											"value": "Motor",
											"disabled": true
										},
										{
											"key": "productDescription",
											"value": "Features include:",
											"disabled": true
										},
										{
											"key": "quantityInStock",
											"value": "32",
											"disabled": true
										},
										{
											"key": "buyPrice",
											"value": "91.02",
											"disabled": true
										},
										{
											"key": "MSRP",
											"value": "13",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Products ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products?dasdsda=faffafa",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									],
									"query": [
										{
											"key": "dasdsda",
											"value": "faffafa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"    pm.collectionVariables.set('productCode', (parseInt(pm.response.json().data.productCode) + 1))\r",
											"}\r",
											"\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'productCode',\r",
											"                'productName',\r",
											"                'productLine',\r",
											"                'productScale',\r",
											"                'productVendor',\r",
											"                'productDescription',\r",
											"                'quantityInStock',\r",
											"                'buyPrice',\r",
											"                'MSRP'\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productCode': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productName': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productScale': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productVendor': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productDescription': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'quantityInStock': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'buyPrice': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'MSRP': {\r",
											"                    'type': 'string',\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"{{productCode}}\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10000\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin Diecast\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create product ERROR fileds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'statusCode',\r",
											"        'error',\r",
											"        'message',\r",
											"        'validation'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'statusCode': {\r",
											"            'type': 'integer'\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'message': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"        'validation': {\r",
											"            'type': 'object',\r",
											"            'properties': {\r",
											"                'body': {\r",
											"                    'type': 'object',\r",
											"                    'properties': {\r",
											"                        'source': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                        'keys': {\r",
											"                            'type': 'array'\r",
											"                        },\r",
											"                        'message': {\r",
											"                            'type': 'string'\r",
											"                        },\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"{{productCode}}\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin Diecast\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"10000\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10000\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin Diecast\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                \"productName\",\r",
											"                \"productLine\",\r",
											"                \"productScale\",\r",
											"                \"productVendor\",\r",
											"                \"productDescription\",\r",
											"                \"quantityInStock\",\r",
											"                \"buyPrice\",\r",
											"                \"MSRP\",\r",
											"                \"productCode\"\r",
											"            ],\r",
											"            'properties': {\r",
											"                \"productName\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productLine\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productScale\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productVendor\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productDescription\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"quantityInStock\": {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                \"buyPrice\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"MSRP\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productCode\": {\r",
											"                    'type': 'string',\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10000\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"10000\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate Ultra\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "daugsduahsdiay"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all Product's quantity success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                \"productName\",\r",
											"                \"productLine\",\r",
											"                \"productScale\",\r",
											"                \"productVendor\",\r",
											"                \"productDescription\",\r",
											"                \"quantityInStock\",\r",
											"                \"buyPrice\",\r",
											"                \"MSRP\",\r",
											"                \"productCode\"\r",
											"            ],\r",
											"            'properties': {\r",
											"                \"productName\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productLine\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productScale\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productVendor\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productDescription\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"quantityInStock\": {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                \"buyPrice\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"MSRP\": {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                \"productCode\": {\r",
											"                    'type': 'string',\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"quantityInStock is equal to 0\", function () {\r",
											"    pm.expect(pm.response.json().data.quantityInStock).to.be.eql(0);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all Product's quantity ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "hduajhasdaajas"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "Get all Orders searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'orderNumber',\r",
											"        'orderDate',\r",
											"        'requiredDate',\r",
											"        'shippedDate',\r",
											"        'status',\r",
											"        'comments',\r",
											"        'customerNumber',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'orderNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'requiredDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'shippedDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'comments': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									],
									"query": [
										{
											"key": "status",
											"value": "Cancelled",
											"disabled": true
										},
										{
											"key": "orderDate",
											"value": "10-22-2003",
											"disabled": true
										},
										{
											"key": "shippedDate",
											"value": "01-10-2003",
											"disabled": true
										},
										{
											"key": "customerNumber",
											"value": "6",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Orders ERROR field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders?xxx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									],
									"query": [
										{
											"key": "xxx",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Orders ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders?status=Shippedasdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									],
									"query": [
										{
											"key": "status",
											"value": "Shippedasdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order with orderDetail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'orderNumber',\r",
											"        'orderDate',\r",
											"        'requiredDate',\r",
											"        'shippedDate',\r",
											"        'status',\r",
											"        'comments',\r",
											"        'customerNumber',\r",
											"        'payments',\r",
											"        'orderdetails',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'orderNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'requiredDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'shippedDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'comments': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'payments': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'orderNumber',\r",
											"            'paymentMethod',\r",
											"            'paymentDate',\r",
											"            'amount',\r",
											"            'isPaid',\r",
											"            'secureHash',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'orderNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'paymentMethod': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'paymentDate': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'amount': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'isPaid': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'secureHash': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        },\r",
											"        'orderdetails': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'orderNumber',\r",
											"            'productCode',\r",
											"            'quantityOrdered',\r",
											"            'priceEach',\r",
											"            'orderLineNumber',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'orderNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'productCode': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'quantityOrdered': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'priceEach': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'orderLineNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"          }\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All ordersDetail have same \"orderNumber\"', function () {\r",
											"  let orderNumber = pm.response.json().data.orderNumber;\r",
											"  let orders = pm.response.json().data.orderdetails;\r",
											"  pm.expect(orders[0].orderNumber).to.equal(orderNumber);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "9"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order ERROR field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Orders: ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comments\": null,\r\n    \"orderDate\": \"2021-12-21\",\r\n    \"requiredDate\": \"2021-12-22\",\r\n    \"status\": \"In Process\",\r\n    \"orderLineNumber\": 3,\r\n    \"products\": [\r\n        {\r\n            \"productCode\": \"S10_1678\",\r\n            \"quantityOrdered\": 10000\r\n        }\r\n    ],\r\n    \"payment\": {\r\n        \"amount\": 9999,\r\n        \"paymentDate\": \"2021-12-21\",\r\n        \"paymentMethod\": \"COD\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'comments',\r",
											"        'orderNumber',\r",
											"        'orderDate',\r",
											"        'requiredDate',\r",
											"        'shippedDate',\r",
											"        'status',\r",
											"        'customerNumber',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'comments': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'orderNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'requiredDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'shippedDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comments\": \"order is updated\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"zzz\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelled order success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelled order ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelled order ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "Update Payments success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"COD\",\r\n    \"paymentDate\": \"2021-12-12\",\r\n    \"isPaid\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payments ERROR value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"COD\",\r\n    \"paymentDate\": \"2021-12-12\",\r\n    \"isPaid\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payments ERROR fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"ABCD\",\r\n    \"paymentDate\": \"2021-12-12\",\r\n    \"isPaid\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Login success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code < 300) {\r",
											"  pm.collectionVariables.set('token', pm.response.json().data.accessToken)\r",
											"}\r",
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'accessToken'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'accessToken': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 200 when login success', function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('\"token\" has been saved to collectionVariables', function () {\r",
											"  pm.expect(pm.response.json().data.accessToken).to.eql(pm.collectionVariables.get('token'));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"customer01@email.com\",\r\n    \"password\": \"Abcd@1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/customer/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"customer",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login ERROR incorrect info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 401 when login error due incorrect info', function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dmurphy@classicmodelcars.com\",\r\n    \"password\": \"Abcd@12341\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login ERROR missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 when login error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dmurphy@classicmodelcars.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/users/employee/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"employee",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Offices",
					"item": [
						{
							"name": "Get all Offices ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Office with Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offices ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"officeCode\": \"1\",\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Offices ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"city\": \"LondonL\",\r\n  \"phone\": \"+44 20 7877 2041\",\r\n  \"addressLine1\": \"25 Old Broad Street\",\r\n  \"addressLine2\": \"Level 8\",\r\n  \"state\": null,\r\n  \"country\": \"UK\",\r\n  \"postalCode\": \"EC2N 1HN\",\r\n  \"territory\": \"EMEA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/offices/:officeCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"offices",
										":officeCode"
									],
									"variable": [
										{
											"key": "officeCode",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Employees",
					"item": [
						{
							"name": "Get all Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									],
									"query": [
										{
											"key": "employeeNum",
											"value": "101010",
											"disabled": true
										},
										{
											"key": "lastName",
											"value": "son",
											"disabled": true
										},
										{
											"key": "firstName",
											"value": "li",
											"disabled": true
										},
										{
											"key": "extension",
											"value": "x5",
											"disabled": true
										},
										{
											"key": "officeCode",
											"value": "2",
											"disabled": true
										},
										{
											"key": "reportsTo",
											"value": "1002",
											"disabled": true
										},
										{
											"key": "jobTitle",
											"value": "ger",
											"disabled": true
										},
										{
											"key": "userNumber",
											"value": "1",
											"disabled": true
										},
										{
											"key": "roleNumber",
											"value": "2",
											"disabled": true
										},
										{
											"key": "isActive",
											"value": "0",
											"disabled": true
										},
										{
											"key": "email",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Murphy\",\r\n  \"firstName\": \"Diane\",\r\n  \"extension\": \"x5800\",\r\n  \"officeCode\": \"1\",\r\n  \"reportsTo\": null,\r\n  \"jobTitle\": \"Staff\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"employeeNumber\": 1188,\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "1188"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Employees ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lastName\": \"Firrelli\",\r\n  \"firstName\": \"Julie\",\r\n  \"extension\": \"x2173\",\r\n  \"officeCode\": \"2\",\r\n  \"reportsTo\": 1143,\r\n  \"jobTitle\": \"Staff\",\r\n  \"roleNumber\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/employees/:employeeNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"employees",
										":employeeNumber"
									],
									"variable": [
										{
											"key": "employeeNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customers",
					"item": [
						{
							"name": "Get all Customers ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers?phone=9999999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									],
									"query": [
										{
											"key": "phone",
											"value": "9999999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers with Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'customerNumber',\r",
											"        'customerName',\r",
											"        'contactLastName',\r",
											"        'contactFirstName',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'city',\r",
											"        'state',\r",
											"        'postalCode',\r",
											"        'country',\r",
											"        'salesRepEmployeeNumber',\r",
											"        'creditLimit',\r",
											"        'userNumber',\r",
											"        'roleNumber',\r",
											"        'isActive',\r",
											"        'email',\r",
											"        'orders',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'customerName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactLastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactFirstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'state': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'salesRepEmployeeNumber': {\r",
											"          'type': ['integer', 'null']\r",
											"        },\r",
											"        'creditLimit': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'roleNumber': {\r",
											"          'type': 'integer',\r",
											"          'enum': [4]\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        },\r",
											"        'orders': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'orderNumber',\r",
											"            'orderDate',\r",
											"            'requiredDate',\r",
											"            'shippedDate',\r",
											"            'status',\r",
											"            'comments',\r",
											"            'customerNumber',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'orderNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'orderDate': {\r",
											"              'type': ['string']\r",
											"            },\r",
											"            'requiredDate': {\r",
											"              'type': ['string']\r",
											"            },\r",
											"            'shippedDate': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'status': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'comments': {\r",
											"              'type': ['string', 'null']\r",
											"            },\r",
											"            'customerNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All orders have same \"customerNumber\"', function () {\r",
											"  let customerNumber = pm.response.json().data.customerNumber;\r",
											"  let orders = pm.response.json().data.orders;\r",
											"  pm.expect(orders[0].customerNumber).to.equal(customerNumber);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  401\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "9999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customers ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"Atelier graphique\",\r\n  \"contactLastName\": \"Schmitt\",\r\n  \"contactFirstName\": \"Carine \",\r\n  \"phone\": \"40.32.2555\",\r\n  \"addressLine1\": \"54, rue Royale\",\r\n  \"addressLine2\": \"no where 10 char\",\r\n  \"city\": \"Nantes\",\r\n  \"state\": \"no where\",\r\n  \"postalCode\": \"44000\",\r\n  \"country\": \"France\",\r\n  \"salesRepEmployeeNumber\": 1370,\r\n  \"creditLimit\": \"21000.00\",\r\n  \"email\": \"dmurphy@classicmodelcars.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customers success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'customerName',\r",
											"        'contactLastName',\r",
											"        'contactFirstName',\r",
											"        'phone',\r",
											"        'addressLine1',\r",
											"        'addressLine2',\r",
											"        'city',\r",
											"        'state',\r",
											"        'postalCode',\r",
											"        'country',\r",
											"        'salesRepEmployeeNumber',\r",
											"        'creditLimit',\r",
											"        'userNumber',\r",
											"        'isActive',\r",
											"        'customerNumber',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'customerName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactLastName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'contactFirstName': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'phone': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine1': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'addressLine2': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'city': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'state': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'postalCode': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'country': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'salesRepEmployeeNumber': {\r",
											"          'type': ['integer', 'null']\r",
											"        },\r",
											"        'creditLimit': {\r",
											"          'type': ['string', 'integer']\r",
											"        },\r",
											"        'userNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'isActive': {\r",
											"          'type': 'integer',\r",
											"          'enum': [0, 1]\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"Atelier graphique\",\r\n  \"contactLastName\": \"Schmitt\",\r\n  \"contactFirstName\": \"Carine \",\r\n  \"phone\": \"40.32.2555\",\r\n  \"addressLine1\": \"54, rue Royale\",\r\n  \"addressLine2\": \"54, rue Royale\",\r\n  \"city\": \"Nantes\",\r\n  \"state\": \"54, rue Royale\",\r\n  \"postalCode\": \"44000\",\r\n  \"country\": \"France\",\r\n  \"salesRepEmployeeNumber\": 13,\r\n  \"creditLimit\": \"21000.00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customers ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerNumber\": 321,\r\n  \"customerName\": \"Corporate Gift Ideas Co.\",\r\n  \"contactLastName\": \"Brown\",\r\n  \"contactFirstName\": \"Julie\",\r\n  \"phone\": \"6505551386\",\r\n  \"addressLine1\": \"7734 Strong St.\",\r\n  \"addressLine2\": null,\r\n  \"city\": \"San Francisco\",\r\n  \"state\": \"CA\",\r\n  \"postalCode\": \"94217\",\r\n  \"country\": \"USA\",\r\n  \"salesRepEmployeeNumber\": 1165,\r\n  \"creditLimit\": \"105000.00\",\r\n  \"userNumber\": 105,\r\n  \"roleNumber\": 4,\r\n  \"isActive\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "321"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customers ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  401\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"Atelier graphique\",\r\n  \"contactLastName\": \"Schmitt\",\r\n  \"contactFirstName\": \"Carine \",\r\n  \"phone\": \"40.32.2555\",\r\n  \"addressLine1\": \"54, rue Royale\",\r\n  \"addressLine2\": \"54, rue Royale\",\r\n  \"city\": \"Nantes\",\r\n  \"state\": \"54, rue Royale\",\r\n  \"postalCode\": \"44000\",\r\n  \"country\": \"France\",\r\n  \"salesRepEmployeeNumber\": 13,\r\n  \"creditLimit\": \"21000.00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "321"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customers ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/customers/:customerNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"customers",
										":customerNumber"
									],
									"variable": [
										{
											"key": "customerNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ProductLines",
					"item": [
						{
							"name": "Get All ProductLines searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('productLine', pm.response.json().total + 10000)\r",
											"}\r",
											"const resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'total',\r",
											"    'data',\r",
											"  ],\r",
											"  'properties': {\r",
											"    'total': {\r",
											"      'type': 'number',\r",
											"    },\r",
											"    'data': {\r",
											"      'type': 'array',\r",
											"      'required': [\r",
											"        'productLine',\r",
											"        'textDescription',\r",
											"        'htmlDescription',\r",
											"        'image',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'productLine': {\r",
											"          'type': 'string',\r",
											"        },\r",
											"        'textDescription': {\r",
											"          'type': ['string', 'null'],\r",
											"        },\r",
											"        'htmlDescription': {\r",
											"          'type': ['string', 'null'],\r",
											"        },\r",
											"        'image': {\r",
											"          'type': ['string', 'null'],\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ProductLines ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines?productLine=nothing",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									],
									"query": [
										{
											"key": "productLine",
											"value": "nothing"
										},
										{
											"key": "productName",
											"value": "1972 Alfa Romeo ",
											"disabled": true
										},
										{
											"key": "productLine",
											"value": "Classic ",
											"disabled": true
										},
										{
											"key": "productVendor",
											"value": "Motor",
											"disabled": true
										},
										{
											"key": "productDescription",
											"value": "Features include:",
											"disabled": true
										},
										{
											"key": "quantityInStock",
											"value": "32",
											"disabled": true
										},
										{
											"key": "buyPrice",
											"value": "91.02",
											"disabled": true
										},
										{
											"key": "MSRP",
											"value": "13",
											"disabled": true
										},
										{
											"key": "productScale",
											"value": "1:10",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ProductLines ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines?dasdsda=faffafa",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									],
									"query": [
										{
											"key": "dasdsda",
											"value": "faffafa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ProductLines Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'error',\r",
											"        'message',\r",
											"        'stack',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'stack': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'statusCode',\r",
											"                'status',\r",
											"            ],\r",
											"            'properties': {\r",
											"                'statusCode': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'status': {\r",
											"                    'type': 'string'\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productLine\": \"{{productLine}}\",\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": null,\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one ProductLine with product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'productLine',\r",
											"                'textDescription',\r",
											"                'htmlDescription',\r",
											"                'image',\r",
											"                'products'\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'textDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'image': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'htmlDescription': {\r",
											"                    'type': ['string', 'null']\r",
											"                },\r",
											"                'products': {\r",
											"                    'type': 'array',\r",
											"                    'required': [\r",
											"                        'productCode',\r",
											"                        'productName',\r",
											"                        'productLine',\r",
											"                        'productScale',\r",
											"                        'productVendor',\r",
											"                        'productDescription',\r",
											"                        'quantityInStock',\r",
											"                        'buyPrice',\r",
											"                        'MSRP'\r",
											"                    ],\r",
											"                    'properties': {\r",
											"                        'productCode': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productName': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productLine': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productScale': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productVendor': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'productDescription': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'quantityInStock': {\r",
											"                            'type': 'number',\r",
											"                        },\r",
											"                        'buyPrice': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                        'MSRP': {\r",
											"                            'type': 'string',\r",
											"                        },\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('productlines.productLine === products.productLine', function(){\r",
											"    pm.expect(pm.response.json().data.productLine).to.be.eql(pm.response.json().data.products[0].productLine)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "Classic Cars"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one ProductLine ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'object',\r",
											"        },\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "'mieuta'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProductLine Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'error',\r",
											"        'message',\r",
											"        'stack',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'stack': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'statusCode',\r",
											"                'status',\r",
											"            ],\r",
											"            'properties': {\r",
											"                'statusCode': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'status': {\r",
											"                    'type': 'string'\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"textDescription\": \"mieuta\",\r\n    \"htmlDescription\": \"chu\",\r\n    \"image\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/productLines/:productLine",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"productLines",
										":productLine"
									],
									"variable": [
										{
											"key": "productLine",
											"value": "10019"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Product",
					"item": [
						{
							"name": "Get all Products searchable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code < 400) {\r",
											"  pm.collectionVariables.set('productCode', pm.response.json().total + 10000)\r",
											"}\r",
											"\r",
											"\r",
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'total',\r",
											"        'data',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'data': {\r",
											"            'type': 'number',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"            'required': [\r",
											"                \"productCode\",\r",
											"                \"productName\",\r",
											"                \"productLine\",\r",
											"                \"productScale\",\r",
											"                \"productVendor\",\r",
											"                \"productDescription\",\r",
											"                \"quantityInStock\",\r",
											"                \"buyPrice\",\r",
											"                \"MSRP\"\r",
											"            ],\r",
											"            'properties': {\r",
											"                'productCode': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productDescription': {\r",
											"                    'type': 'string'\r",
											"                },\r",
											"                'productLine': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productName': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productScale': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'productVendor': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'quantityInStock': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'buyPrice': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"                'MSRP': {\r",
											"                    'type': 'string',\r",
											"                },\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Products ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"        'data'\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'data': {\r",
											"            'type': 'array',\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products?productCode=S10_475",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									],
									"query": [
										{
											"key": "productCode",
											"value": "S10_475"
										},
										{
											"key": "productName",
											"value": "1972 Alfa Romeo ",
											"disabled": true
										},
										{
											"key": "productLine",
											"value": "Classic ",
											"disabled": true
										},
										{
											"key": "productScale",
											"value": "1:10",
											"disabled": true
										},
										{
											"key": "productVendor",
											"value": "Motor",
											"disabled": true
										},
										{
											"key": "productDescription",
											"value": "Features include:",
											"disabled": true
										},
										{
											"key": "quantityInStock",
											"value": "32",
											"disabled": true
										},
										{
											"key": "buyPrice",
											"value": "91.02",
											"disabled": true
										},
										{
											"key": "MSRP",
											"value": "13",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Products ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products?dasdsda=faffafa",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									],
									"query": [
										{
											"key": "dasdsda",
											"value": "faffafa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'error',\r",
											"        'message',\r",
											"        'stack',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'stack': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'statusCode',\r",
											"                'status',\r",
											"            ],\r",
											"            'properties': {\r",
											"                'statusCode': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'status': {\r",
											"                    'type': 'string'\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productCode\": \"{{productCode}}\",\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin Diecast\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Product Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'error',\r",
											"        'message',\r",
											"        'stack',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'stack': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'statusCode',\r",
											"                'status',\r",
											"            ],\r",
											"            'properties': {\r",
											"                'statusCode': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'status': {\r",
											"                    'type': 'string'\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productName\": \"1969 Harley Davidson Ultimate\",\r\n    \"productLine\": \"10019\",\r\n    \"productScale\": \"1:10\",\r\n    \"productVendor\": \"Min Lin\",\r\n    \"productDescription\": \"This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.\",\r\n    \"quantityInStock\": 7933,\r\n    \"buyPrice\": \"48.81\",\r\n    \"MSRP\": \"95.70\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all Product's quantity Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'error',\r",
											"        'message',\r",
											"        'stack',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'stack': {\r",
											"            'type': 'string',\r",
											"        },\r",
											"        'error': {\r",
											"            'type': 'object',\r",
											"            'required': [\r",
											"                'statusCode',\r",
											"                'status',\r",
											"            ],\r",
											"            'properties': {\r",
											"                'statusCode': {\r",
											"                    'type': 'number',\r",
											"                },\r",
											"                'status': {\r",
											"                    'type': 'string'\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products/:productCode",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										":productCode"
									],
									"variable": [
										{
											"key": "productCode",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "Get all Orders ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders?status=Shippedasdfg",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									],
									"query": [
										{
											"key": "status",
											"value": "Shippedasdfg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order with orderDetail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'data': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'orderNumber',\r",
											"        'orderDate',\r",
											"        'requiredDate',\r",
											"        'shippedDate',\r",
											"        'status',\r",
											"        'comments',\r",
											"        'customerNumber',\r",
											"        'payments',\r",
											"        'orderdetails',\r",
											"      ],\r",
											"      'properties': {\r",
											"        'orderNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'orderDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'requiredDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'shippedDate': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        },\r",
											"        'comments': {\r",
											"          'type': ['string', 'null']\r",
											"        },\r",
											"        'customerNumber': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'payments': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'orderNumber',\r",
											"            'paymentMethod',\r",
											"            'paymentDate',\r",
											"            'amount',\r",
											"            'isPaid',\r",
											"            'secureHash',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'orderNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'paymentMethod': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'paymentDate': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'amount': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'isPaid': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'secureHash': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        },\r",
											"        'orderdetails': {\r",
											"          'type': 'array',\r",
											"          'required': [\r",
											"            'orderNumber',\r",
											"            'productCode',\r",
											"            'quantityOrdered',\r",
											"            'priceEach',\r",
											"            'orderLineNumber',\r",
											"          ],\r",
											"          'properties': {\r",
											"            'orderNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'productCode': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'quantityOrdered': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"            'priceEach': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'orderLineNumber': {\r",
											"              'type': 'integer'\r",
											"            },\r",
											"          }\r",
											"        },\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"pm.test('All ordersDetail have same \"orderNumber\"', function () {\r",
											"  let orderNumber = pm.response.json().data.orderNumber;\r",
											"  let orders = pm.response.json().data.orderdetails;\r",
											"  pm.expect(orders[0].orderNumber).to.equal(orderNumber);\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order ERROR value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  404\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(404);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one Order ERROR fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'query': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Orders success Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message',\r",
											"    'data'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'data': {\r",
											"      'order': {\r",
											"        'type': 'object',\r",
											"        'required': [\r",
											"          'customerNumber',\r",
											"          'comments',\r",
											"          'orderDate',\r",
											"          'requiredDate',\r",
											"          'status',\r",
											"          'orderNumber',\r",
											"        ],\r",
											"        'properties': {\r",
											"          'customerNumber': {\r",
											"            'type': 'integer'\r",
											"          },\r",
											"          'comments': {\r",
											"            'type': ['string', 'null']\r",
											"          },\r",
											"          'orderDate': {\r",
											"            'type': 'string'\r",
											"          },\r",
											"          'requiredDate': {\r",
											"            'type': 'string'\r",
											"          },\r",
											"          'status': {\r",
											"            'type': 'string'\r",
											"          },\r",
											"          'orderNumber': {\r",
											"            'type': 'integer'\r",
											"          },\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"comments\": null,\r\n  \"orderDate\": \"2021-12-21\",\r\n  \"requiredDate\": \"2021-12-22\",\r\n  \"status\": \"In Process\",\r\n  \"orderLineNumber\": 3,\r\n  \"products\": [\r\n    {\r\n      \"productCode\": \"S10_1678\",\r\n      \"quantityOrdered\": 6\r\n    }\r\n  ],\r\n  \"payment\": {\r\n    \"amount\": 9999,\r\n    \"paymentDate\": \"2021-12-21\",\r\n    \"paymentMethod\": \"COD\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Orders: Product out of stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  200\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"comments\": null,\r\n  \"orderDate\": \"2021-12-21\",\r\n  \"requiredDate\": \"2021-12-22\",\r\n  \"status\": \"In Process\",\r\n  \"orderLineNumber\": 3,\r\n  \"products\": [\r\n    {\r\n      \"productCode\": \"S10_1678\",\r\n      \"quantityOrdered\": 999999\r\n    }\r\n  ],\r\n  \"payment\": {\r\n    \"amount\": 9999,\r\n    \"paymentDate\": \"2021-12-21\",\r\n    \"paymentMethod\": \"COD\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Orders: ERROR missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'message'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is  400\", function () {\r",
											"  pm.expect(pm.response.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comments\": null,\r\n    \"orderDate\": \"2021-12-21\",\r\n    \"requiredDate\": \"2021-12-22\",\r\n    \"status\": \"In Process\",\r\n    \"orderLineNumber\": 3,\r\n    \"products\": [\r\n        {\r\n            \"productCode\": \"S10_1678\",\r\n            \"quantityOrdered\": 10000\r\n        }\r\n    ],\r\n    \"payment\": {\r\n        \"amount\": 9999,\r\n        \"paymentDate\": \"2021-12-21\",\r\n        \"paymentMethod\": \"COD\",\r\n        \"isPaid\": 0\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"zzz\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelled order ERROR Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/orders/:orderNumber",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"orders",
										":orderNumber"
									],
									"variable": [
										{
											"key": "orderNumber",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "Update Payments success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"    'type': 'object',\r",
											"    'required': [\r",
											"        'message',\r",
											"    ],\r",
											"    'properties': {\r",
											"        'message': {\r",
											"            'type': 'string'\r",
											"        },\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"    pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"COD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payments ERROR value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'error',\r",
											"    'message',\r",
											"    'stack'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'error': {\r",
											"      'type': 'object',\r",
											"      'required': [\r",
											"        'statusCode',\r",
											"        'status'\r",
											"      ],\r",
											"      'properties': {\r",
											"        'statusCode': {\r",
											"          'type': 'integer'\r",
											"        },\r",
											"        'status': {\r",
											"          'type': 'string'\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'stack': {\r",
											"      'type': 'string'\r",
											"    }\r",
											"  }\r",
											"}\r",
											"pm.test(\"Response time is less than 1s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is greater than 400\", function () {\r",
											"  pm.expect(pm.response.code).to.be.above(399);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"COD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payments ERROR fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let resSchema = {\r",
											"  'type': 'object',\r",
											"  'required': [\r",
											"    'statusCode',\r",
											"    'error',\r",
											"    'message',\r",
											"    'validation'\r",
											"  ],\r",
											"  'properties': {\r",
											"    'statusCode': {\r",
											"      'type': 'integer'\r",
											"    },\r",
											"    'error': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'message': {\r",
											"      'type': 'string'\r",
											"    },\r",
											"    'validation': {\r",
											"      'type': 'object',\r",
											"      'properties': {\r",
											"        'body': {\r",
											"          'type': 'object',\r",
											"          'properties': {\r",
											"            'source': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"            'keys': {\r",
											"              'type': 'array'\r",
											"            },\r",
											"            'message': {\r",
											"              'type': 'string'\r",
											"            },\r",
											"          }\r",
											"        }\r",
											"      }\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Response time is less than 3s\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test('Status code is 400 error due missing field ', function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response to have the valid schema', function () {\r",
											"  pm.response.to.have.jsonSchema(resSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"paymentMethod\": \"ABCD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/payments/2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"payments",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:3000"
		},
		{
			"key": "officeCode",
			"value": ""
		},
		{
			"key": "employeeNumber",
			"value": ""
		},
		{
			"key": "customerNumber",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "productLine",
			"value": ""
		},
		{
			"key": "productCode",
			"value": "",
			"type": "string"
		}
	]
}